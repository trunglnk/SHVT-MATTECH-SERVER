<?php

/**
 * Global helpers file with misc functions.
 */

use Carbon\Carbon;

if (!function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (!function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (!function_exists('includeRouteFiles')) {

    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {

        try {
            $files = new RecursiveIteratorIterator(
                new RecursiveDirectoryIterator(
                    $folder,
                    FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_SELF | FilesystemIterator::SKIP_DOTS
                )
            );

            while ($files->valid()) {
                require $files->key();
                $files->next();
            }
        } catch (Exception $e) {
            echo $e->getMessage();
        }
    }
}

if (!function_exists('getRtlCss')) {

    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path) . '/' . $filename . '.rtl.css';
    }
}

if (!function_exists('rrmdir')) {
    function rrmdir($dir)
    {
        if (is_dir($dir)) {
            $objects = scandir($dir);
            foreach ($objects as $object) {
                if ($object != "." && $object != "..") {
                    if (filetype($dir . "/" . $object) == "dir") rrmdir($dir . "/" . $object);
                    else unlink($dir . "/" . $object);
                }
            }
            reset($objects);
            rmdir($dir);
        }
    }
}



if (!function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (!function_exists('convert_vi_to_en')) {
    function convert_vi_to_en($str)
    {
        $str = preg_replace(
            [
                "/(à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ)/",
                "/(è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ)/",
                "/(ì|í|ị|ỉ|ĩ)/",
                "/(ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ)/",
                "/(ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ)/",
                "/(ỳ|ý|ỵ|ỷ|ỹ)/",
                "/(đ)/",
                "/(À|Á|Ạ|Ả|Ã|Â|Ầ|Ấ|Ậ|Ẩ|Ẫ|Ă|Ằ|Ắ|Ặ|Ẳ|Ẵ)/",
                "/(È|É|Ẹ|Ẻ|Ẽ|Ê|Ề|Ế|Ệ|Ể|Ễ)/",
                "/(Ì|Í|Ị|Ỉ|Ĩ)/",
                "/(Ò|Ó|Ọ|Ỏ|Õ|Ô|Ồ|Ố|Ộ|Ổ|Ỗ|Ơ|Ờ|Ớ|Ợ|Ở|Ỡ)/",
                "/(Ù|Ú|Ụ|Ủ|Ũ|Ư|Ừ|Ứ|Ự|Ử|Ữ)/",
                "/(Ỳ|Ý|Ỵ|Ỷ|Ỹ)/",
                "/(Đ)/",
            ],
            [
                "a",
                "e",
                "i",
                "o",
                "u",
                "y",
                "d",
                "A",
                "E",
                "I",
                "O",
                "U",
                "Y",
                "D",
            ],
            $str
        );
        return $str;
    }
}
if (!function_exists('getexcelcolumnname')) {
    function getexcelcolumnname($index)
    {
        //Get the quotient : if the index superior to base 26 max ?
        $quotient = $index / 26;
        if ($quotient >= 1) {
            //If yes, get top level column + the current column code
            return getexcelcolumnname($quotient - 1) . chr(($index % 26) + 65);
        } else {
            //If no just return the current column code
            return chr(65 + $index);
        }
    }
}
Carbon::macro('isValidDate', function ($string, $format = 'Y-m-d H:i:s') {
    $d = DateTime::createFromFormat($format, $string);

    return $d && $d->format($format) === $string;
});

if (!function_exists('downloadFromRemoteServer')) {
    function downloadFromRemoteServer(string $remoteFileURL, $destinationFilepath, $cb = null)
    {
        $options = [
            CURLOPT_URL             => $remoteFileURL,
            CURLOPT_FILE            => is_resource($destinationFilepath) ? $destinationFilepath : fopen($destinationFilepath, 'wb'),
            CURLOPT_FOLLOWLOCATION  => true,
            CURLOPT_FAILONERROR     => true,
        ];

        $curl           = curl_init();
        curl_setopt_array($curl, $options);
        if (isset($cb)) {
            $cb($curl);
        }
        $returnResult   = curl_exec($curl);
        if ($returnResult === false) {
            throw new ErrorException(curl_error($curl));
        }
        return (false === $returnResult) ? curl_error($curl) : true;
    }
}
